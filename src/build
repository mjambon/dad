#! /usr/bin/env bash
#
# Build a statically-linked executable for the host platform or for a set of
# of popular platforms in preparation for a release.
#
set -eu

usage() {
  cat <<EOF
Usage: ./build [release]

Build an executable for the local platform, or for multiple platforms
if the first argument is literally 'release'.
EOF
}

make_version_go() {
  cat > version.go <<EOF
// Generated by build script.
package main
const version = "$(cat ../VERSION)"
EOF
}

build() {
  if [[ "$is_release" = true ]]; then
    dstdir="../release"
    version=$(cat ../VERSION)
    suffix="-$version-${GOOS:-}-${GOARCH:-}"
  else
    dstdir="../bin"
    suffix=""
  fi

  # Add .exe for Windows.
  if [[ "${GOOS:-}" = "windows" ]]; then
    suffix+=".exe"
  fi

  out="$dstdir"/vanity"$suffix"
  echo "Building $out."
  make_version_go
  go build -o "$out" *.go
}

build_local() {
  is_release=false
  build
}

build_release() {
  is_release=true
  # Are these the most popular combinations? Add more as needed.
  GOOS=linux GOARCH=amd64 build
  GOOS=linux GOARCH=386 build
  GOOS=darwin GOARCH=amd64 build
  GOOS=darwin GOARCH=386 build
  GOOS=windows GOARCH=amd64 build
  GOOS=windows GOARCH=386 build
}

if [[ $# -gt 0 ]]; then
  case "$1" in
    release)
      build_release
      ;;
    *)
      usage 2>&1
      exit 1
  esac
else
  build_local
fi
